#include <iostream>

using namespace std;

int main(void)
{
	int n;
	
	cin >> n; // n은 100000이하. O(n^2)는 시간초과 
	
	//-1000 ~ 1000 사이의 수.
	int a[100001] = { 0, };
	int dp[100001] = { 0, };
	
	int i;
	for(i = 1; i <= n; ++i){
		cin >> a[i];
	}
	
	int max = a[1];
	dp[1] = a[1];
	// dp에 저장할 대상. i의 인덱스에 있을 경우. 
	// 1) a[i-1] 까지의 따졌을때 연속합 최고인 경우. 이것을 그냥 dp로. 
	// 2) a[i]
	// 1), 2) 중 큰 값을 골라서 dp[i]에 저장한다.
	
	//근데 dp에 저장된 값과 비교하면 
	//아 괜찮을듯. 어차피 그때까지 연속합max최고 
	
	// 양수인 경우를 따져야 한다.
	// i-1까지 연속합이 최대이더라도 음수면 더해도 최댓값이아닐테니.
	// 아니지, 음수여도 최댓값은 맞다. 만약 양수가 아니면 안된다고하면
	// 다 음수로 이루어져 있으면 최댓값이 출력안되 
	// -10 -10 -10 -11 -12
	for(i = 2; i <= n; ++i){
		if(dp[i-1] > 0) // 즉 dp[i-1] + a[i] > a[i] 에서 양변 제거 
			dp[i] = dp[i-1] + a[i];
		else
			dp[i] = a[i];
		if(max < dp[i]){
			max = dp[i];
		}
	}
	
	cout << max << endl;
	
	return 0;
}
