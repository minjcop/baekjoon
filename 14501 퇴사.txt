!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
func(i+t[i+1], n, t, p, sum+p[i+1]); //1)
func(i+1, n, t, p, sum); // 2)
해당 날에 할 수도, 안할수도 있다.
1)은 해당 날에 상담을 하는 경우
2)은 해당 날에 상담을 안하는 경우(다음 날로 넘어감.)
i+1을 해주게 되면 모든 경우를 포함할 수 있게 된다.

재귀의 경우에는 함수의 인자가 될만한거 다적어보고, 필요없는거 없애는게 더 나을듯하다.

오늘부터 N+1째날 퇴사를 하기 위해서 남은 N일 동안 최대한 많은 상담을 하려고 한다.
각각의 상담은 상담을 완료하는데 걸리는 시간 Ti와
상담을 했을때 받을 수 있는 금액 Pi로 이루어져 있다.

상담이 종료되었을때 시간을 고려해서 다음상담은 어떤것인지,
해당 상담을 퇴사 전에 할 수 있는지 등을 고려하면 된다.

N(1<=N<=15)
얻을 수 있는 최대 수익.
Ti(1 <= Ti <= 5)
Pi(1 <= Pi <= 1000)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
func(i+t[i+1], n, t, p, sum+p[i+1]); //1)
func(i+1, n, t, p, sum); // 2)
해당 날에 할 수도, 안할수도 있다.
1)은 해당 날에 상담을 하는 경우
2)은 해당 날에 상담을 안하는 경우(다음 날로 넘어감.)
i+1을 해주게 되면 모든 경우를 포함할 수 있게 된다.

주의) n일에 시작해서 ti=1인 경우 그 날에 끝나므로 포함시켜줘야 한다.
그래서 day == n+1이 되면 종료를 하게 만들어줘야 한다.

